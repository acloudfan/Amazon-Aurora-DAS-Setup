{"changed":true,"filter":false,"title":"lambda_function.py","tooltip":"/code/lambda_function.py","value":"import json\nimport base64\nimport os\nimport boto3\nimport zlib\n\n# Used for decryption of the received payload\nimport aws_encryption_sdk\nfrom aws_encryption_sdk import CommitmentPolicy\nfrom aws_encryption_sdk.internal.crypto import WrappingKey\nfrom aws_encryption_sdk.key_providers.raw import RawMasterKeyProvider\nfrom aws_encryption_sdk.identifiers import WrappingAlgorithm, EncryptionKeyType\n\nimport processor.heartbeat_processor as heartbeat_processor\nimport processor.sqlevents_processor as sqlevents_processor\n\nfrom processor import heartbeat_processor\nfrom processor import sqlevents_processor\n\n# Controls the filtering of Heartbean events\nFILTER_HEARTBEAT_EVENTS = os.getenv('FILTER_HEARTBEAT_EVENTS', \"false\").lower() ==  \"true\"\n\n# Setup the session | clients\nREGION_NAME= os.environ['AWS_REGION']\nsession = boto3.session.Session()\nkms = session.client('kms', region_name=REGION_NAME)\n\n# Create the encryption client\nenc_client = aws_encryption_sdk.EncryptionSDKClient(commitment_policy=CommitmentPolicy.REQUIRE_ENCRYPT_ALLOW_DECRYPT)\n\n# Represents the Master Key Provider\nclass MyRawMasterKeyProvider(RawMasterKeyProvider):\n    provider_id = \"BC\"\n\n    def __new__(cls, *args, **kwargs):\n        obj = super(RawMasterKeyProvider, cls).__new__(cls)\n        return obj\n\n    def __init__(self, plain_key):\n        RawMasterKeyProvider.__init__(self)\n        self.wrapping_key = WrappingKey(wrapping_algorithm=WrappingAlgorithm.AES_256_GCM_IV12_TAG16_NO_PADDING,\n                                        wrapping_key=plain_key, wrapping_key_type=EncryptionKeyType.SYMMETRIC)\n\n    def _get_raw_key(self, key_id):\n        return self.wrapping_key\n\n\n\n# Decrypt the payload using the key and then decompress (zip to plaintext)\ndef decrypt_decompress(payload, key):\n    my_key_provider = MyRawMasterKeyProvider(key)\n    my_key_provider.add_master_key(\"DataKey\")\n    decrypted_plaintext, header = enc_client.decrypt(\n        source=payload,\n        materials_manager=aws_encryption_sdk.materials_managers.default.DefaultCryptoMaterialsManager(master_key_provider=my_key_provider))\n    \n    # print(decrypted)\n    return zlib.decompress(decrypted_plaintext, zlib.MAX_WBITS + 16)\n    \n\n# Lambda Handler function\ndef lambda_handler(event, context):\n\n    # Output is an array of transformed records\n    output = []\n    heartBeatEventRecords = heartbeat_processor.HeartBeatEventRecords()\n    sQLEventRecords = sqlevents_processor.SQLEventRecords()\n    \n    \n    for record in event['records']:\n        \n        # Get the data from record - it is in base64 format\n        data = record['data']\n        payload_overall = base64.b64decode(data)\n        payload_overall = payload_overall.decode('utf-8')\n        \n        # Parse the json payload\n        payload_overall_json=json.loads(payload_overall)\n        \n        # Get the base64 decoded databaseActivityEvents array from the record\n        payload_decoded = base64.b64decode(payload_overall_json['databaseActivityEvents'])\n        \n        \n        # Decrypt the key\n        # RESOURCE_ID = Cluster ID of the RDS instance\n        RESOURCE_ID = os.environ['RESOURCE_ID']\n        \n        # Decrypt\n        data_key_decoded = base64.b64decode(payload_overall_json['key'])\n        data_key_decrypt_result = kms.decrypt(CiphertextBlob=data_key_decoded, EncryptionContext={'aws:rds:dbc-id': RESOURCE_ID})\n            \n        # Decrypt the data\n        # print(data_key_decrypt_result['Plaintext'])\n        data_decrypted_decompressed =  decrypt_decompress(payload_decoded, data_key_decrypt_result['Plaintext'])\n        \n        # Parse the JSON\n        data_decrypted_decompressed_json =json.loads(data_decrypted_decompressed)\n        \n        if data_decrypted_decompressed_json['databaseActivityEventList'][0]['type'] == \"heartbeat\" :\n            # print(data_decrypted_decompressed_json)\n            heartBeatEventRecords.add(record['recordId'], data_decrypted_decompressed_json,record['approximateArrivalTimestamp'])\n        else:\n            sQLEventRecords.add(record['recordId'], data_decrypted_decompressed_json, record['approximateArrivalTimestamp'])\n            \n            \n    # output.append(heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS))\n    # output.append(sQLEventRecords.process())\n    \n    # output_hb = heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS)\n    \n    output_hb = heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS)\n    output_sql = sQLEventRecords.process()\n    \n\n    \n    print('Total records processed {} records.'.format(len(output_hb)+len(output_sql)))\n\n    \n    return {'records': output_hb + output_sql }\n","undoManager":{"mark":-2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":119,"column":0},"action":"insert","lines":["import json","import base64","import os","import boto3","import zlib","","# Used for decryption of the received payload","import aws_encryption_sdk","from aws_encryption_sdk import CommitmentPolicy","from aws_encryption_sdk.internal.crypto import WrappingKey","from aws_encryption_sdk.key_providers.raw import RawMasterKeyProvider","from aws_encryption_sdk.identifiers import WrappingAlgorithm, EncryptionKeyType","","import processor.heartbeat_processor as heartbeat_processor","import processor.sqlevents_processor as sqlevents_processor","","from processor import heartbeat_processor","from processor import sqlevents_processor","","# Controls the filtering of Heartbean events","FILTER_HEARTBEAT_EVENTS = os.getenv('FILTER_HEARTBEAT_EVENTS', \"false\").lower() ==  \"true\"","","# Setup the session | clients","REGION_NAME= os.environ['AWS_REGION']","session = boto3.session.Session()","kms = session.client('kms', region_name=REGION_NAME)","","# Create the encryption client","enc_client = aws_encryption_sdk.EncryptionSDKClient(commitment_policy=CommitmentPolicy.REQUIRE_ENCRYPT_ALLOW_DECRYPT)","","# Represents the Master Key Provider","class MyRawMasterKeyProvider(RawMasterKeyProvider):","    provider_id = \"BC\"","","    def __new__(cls, *args, **kwargs):","        obj = super(RawMasterKeyProvider, cls).__new__(cls)","        return obj","","    def __init__(self, plain_key):","        RawMasterKeyProvider.__init__(self)","        self.wrapping_key = WrappingKey(wrapping_algorithm=WrappingAlgorithm.AES_256_GCM_IV12_TAG16_NO_PADDING,","                                        wrapping_key=plain_key, wrapping_key_type=EncryptionKeyType.SYMMETRIC)","","    def _get_raw_key(self, key_id):","        return self.wrapping_key","","","","# Decrypt the payload using the key and then decompress (zip to plaintext)","def decrypt_decompress(payload, key):","    my_key_provider = MyRawMasterKeyProvider(key)","    my_key_provider.add_master_key(\"DataKey\")","    decrypted_plaintext, header = enc_client.decrypt(","        source=payload,","        materials_manager=aws_encryption_sdk.materials_managers.default.DefaultCryptoMaterialsManager(master_key_provider=my_key_provider))","    ","    # print(decrypted)","    return zlib.decompress(decrypted_plaintext, zlib.MAX_WBITS + 16)","    ","","# Lambda Handler function","def lambda_handler(event, context):","","    # Output is an array of transformed records","    output = []","    heartBeatEventRecords = heartbeat_processor.HeartBeatEventRecords()","    sQLEventRecords = sqlevents_processor.SQLEventRecords()","    ","    ","    for record in event['records']:","        ","        # Get the data from record - it is in base64 format","        data = record['data']","        payload_overall = base64.b64decode(data)","        payload_overall = payload_overall.decode('utf-8')","        ","        # Parse the json payload","        payload_overall_json=json.loads(payload_overall)","        ","        # Get the base64 decoded databaseActivityEvents array from the record","        payload_decoded = base64.b64decode(payload_overall_json['databaseActivityEvents'])","        ","        ","        # Decrypt the key","        # RESOURCE_ID = Cluster ID of the RDS instance","        RESOURCE_ID = os.environ['RESOURCE_ID']","        ","        # Decrypt","        data_key_decoded = base64.b64decode(payload_overall_json['key'])","        data_key_decrypt_result = kms.decrypt(CiphertextBlob=data_key_decoded, EncryptionContext={'aws:rds:dbc-id': RESOURCE_ID})","            ","        # Decrypt the data","        # print(data_key_decrypt_result['Plaintext'])","        data_decrypted_decompressed =  decrypt_decompress(payload_decoded, data_key_decrypt_result['Plaintext'])","        ","        # Parse the JSON","        data_decrypted_decompressed_json =json.loads(data_decrypted_decompressed)","        ","        if data_decrypted_decompressed_json['databaseActivityEventList'][0]['type'] == \"heartbeat\" :","            # print(data_decrypted_decompressed_json)","            heartBeatEventRecords.add(record['recordId'], data_decrypted_decompressed_json,record['approximateArrivalTimestamp'])","        else:","            sQLEventRecords.add(record['recordId'], data_decrypted_decompressed_json, record['approximateArrivalTimestamp'])","            ","            ","    # output.append(heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS))","    # output.append(sQLEventRecords.process())","    ","    # output_hb = heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS)","    ","    output_hb = heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS)","    output_sql = sQLEventRecords.process()","    ","","    ","    print('Total records processed {} records.'.format(len(output_hb)+len(output_sql)))","","    ","    return {'records': output_hb + output_sql }",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":119,"column":0},"action":"remove","lines":["import json","import base64","import os","import boto3","import zlib","","# Used for decryption of the received payload","import aws_encryption_sdk","from aws_encryption_sdk import CommitmentPolicy","from aws_encryption_sdk.internal.crypto import WrappingKey","from aws_encryption_sdk.key_providers.raw import RawMasterKeyProvider","from aws_encryption_sdk.identifiers import WrappingAlgorithm, EncryptionKeyType","","import processor.heartbeat_processor as heartbeat_processor","import processor.sqlevents_processor as sqlevents_processor","","from processor import heartbeat_processor","from processor import sqlevents_processor","","# Controls the filtering of Heartbean events","FILTER_HEARTBEAT_EVENTS = os.getenv('FILTER_HEARTBEAT_EVENTS', \"false\").lower() ==  \"true\"","","# Setup the session | clients","REGION_NAME= os.environ['AWS_REGION']","session = boto3.session.Session()","kms = session.client('kms', region_name=REGION_NAME)","","# Create the encryption client","enc_client = aws_encryption_sdk.EncryptionSDKClient(commitment_policy=CommitmentPolicy.REQUIRE_ENCRYPT_ALLOW_DECRYPT)","","# Represents the Master Key Provider","class MyRawMasterKeyProvider(RawMasterKeyProvider):","    provider_id = \"BC\"","","    def __new__(cls, *args, **kwargs):","        obj = super(RawMasterKeyProvider, cls).__new__(cls)","        return obj","","    def __init__(self, plain_key):","        RawMasterKeyProvider.__init__(self)","        self.wrapping_key = WrappingKey(wrapping_algorithm=WrappingAlgorithm.AES_256_GCM_IV12_TAG16_NO_PADDING,","                                        wrapping_key=plain_key, wrapping_key_type=EncryptionKeyType.SYMMETRIC)","","    def _get_raw_key(self, key_id):","        return self.wrapping_key","","","","# Decrypt the payload using the key and then decompress (zip to plaintext)","def decrypt_decompress(payload, key):","    my_key_provider = MyRawMasterKeyProvider(key)","    my_key_provider.add_master_key(\"DataKey\")","    decrypted_plaintext, header = enc_client.decrypt(","        source=payload,","        materials_manager=aws_encryption_sdk.materials_managers.default.DefaultCryptoMaterialsManager(master_key_provider=my_key_provider))","    ","    # print(decrypted)","    return zlib.decompress(decrypted_plaintext, zlib.MAX_WBITS + 16)","    ","","# Lambda Handler function","def lambda_handler(event, context):","","    # Output is an array of transformed records","    output = []","    heartBeatEventRecords = heartbeat_processor.HeartBeatEventRecords()","    sQLEventRecords = sqlevents_processor.SQLEventRecords()","    ","    ","    for record in event['records']:","        ","        # Get the data from record - it is in base64 format","        data = record['data']","        payload_overall = base64.b64decode(data)","        payload_overall = payload_overall.decode('utf-8')","        ","        # Parse the json payload","        payload_overall_json=json.loads(payload_overall)","        ","        # Get the base64 decoded databaseActivityEvents array from the record","        payload_decoded = base64.b64decode(payload_overall_json['databaseActivityEvents'])","        ","        ","        # Decrypt the key","        # RESOURCE_ID = Cluster ID of the RDS instance","        RESOURCE_ID = os.environ['RESOURCE_ID']","        ","        # Decrypt","        data_key_decoded = base64.b64decode(payload_overall_json['key'])","        data_key_decrypt_result = kms.decrypt(CiphertextBlob=data_key_decoded, EncryptionContext={'aws:rds:dbc-id': RESOURCE_ID})","            ","        # Decrypt the data","        # print(data_key_decrypt_result['Plaintext'])","        data_decrypted_decompressed =  decrypt_decompress(payload_decoded, data_key_decrypt_result['Plaintext'])","        ","        # Parse the JSON","        data_decrypted_decompressed_json =json.loads(data_decrypted_decompressed)","        ","        if data_decrypted_decompressed_json['databaseActivityEventList'][0]['type'] == \"heartbeat\" :","            # print(data_decrypted_decompressed_json)","            heartBeatEventRecords.add(record['recordId'], data_decrypted_decompressed_json,record['approximateArrivalTimestamp'])","        else:","            sQLEventRecords.add(record['recordId'], data_decrypted_decompressed_json, record['approximateArrivalTimestamp'])","            ","            ","    # output.append(heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS))","    # output.append(sQLEventRecords.process())","    ","    # output_hb = heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS)","    ","    output_hb = heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS)","    output_sql = sQLEventRecords.process()","    ","","    ","    print('Total records processed {} records.'.format(len(output_hb)+len(output_sql)))","","    ","    return {'records': output_hb + output_sql }",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":119,"column":0},"action":"insert","lines":["import json","import base64","import os","import boto3","import zlib","","# Used for decryption of the received payload","import aws_encryption_sdk","from aws_encryption_sdk import CommitmentPolicy","from aws_encryption_sdk.internal.crypto import WrappingKey","from aws_encryption_sdk.key_providers.raw import RawMasterKeyProvider","from aws_encryption_sdk.identifiers import WrappingAlgorithm, EncryptionKeyType","","import processor.heartbeat_processor as heartbeat_processor","import processor.sqlevents_processor as sqlevents_processor","","from processor import heartbeat_processor","from processor import sqlevents_processor","","# Controls the filtering of Heartbean events","FILTER_HEARTBEAT_EVENTS = os.getenv('FILTER_HEARTBEAT_EVENTS', \"false\").lower() ==  \"true\"","","# Setup the session | clients","REGION_NAME= os.environ['AWS_REGION']","session = boto3.session.Session()","kms = session.client('kms', region_name=REGION_NAME)","","# Create the encryption client","enc_client = aws_encryption_sdk.EncryptionSDKClient(commitment_policy=CommitmentPolicy.REQUIRE_ENCRYPT_ALLOW_DECRYPT)","","# Represents the Master Key Provider","class MyRawMasterKeyProvider(RawMasterKeyProvider):","    provider_id = \"BC\"","","    def __new__(cls, *args, **kwargs):","        obj = super(RawMasterKeyProvider, cls).__new__(cls)","        return obj","","    def __init__(self, plain_key):","        RawMasterKeyProvider.__init__(self)","        self.wrapping_key = WrappingKey(wrapping_algorithm=WrappingAlgorithm.AES_256_GCM_IV12_TAG16_NO_PADDING,","                                        wrapping_key=plain_key, wrapping_key_type=EncryptionKeyType.SYMMETRIC)","","    def _get_raw_key(self, key_id):","        return self.wrapping_key","","","","# Decrypt the payload using the key and then decompress (zip to plaintext)","def decrypt_decompress(payload, key):","    my_key_provider = MyRawMasterKeyProvider(key)","    my_key_provider.add_master_key(\"DataKey\")","    decrypted_plaintext, header = enc_client.decrypt(","        source=payload,","        materials_manager=aws_encryption_sdk.materials_managers.default.DefaultCryptoMaterialsManager(master_key_provider=my_key_provider))","    ","    # print(decrypted)","    return zlib.decompress(decrypted_plaintext, zlib.MAX_WBITS + 16)","    ","","# Lambda Handler function","def lambda_handler(event, context):","","    # Output is an array of transformed records","    output = []","    heartBeatEventRecords = heartbeat_processor.HeartBeatEventRecords()","    sQLEventRecords = sqlevents_processor.SQLEventRecords()","    ","    ","    for record in event['records']:","        ","        # Get the data from record - it is in base64 format","        data = record['data']","        payload_overall = base64.b64decode(data)","        payload_overall = payload_overall.decode('utf-8')","        ","        # Parse the json payload","        payload_overall_json=json.loads(payload_overall)","        ","        # Get the base64 decoded databaseActivityEvents array from the record","        payload_decoded = base64.b64decode(payload_overall_json['databaseActivityEvents'])","        ","        ","        # Decrypt the key","        # RESOURCE_ID = Cluster ID of the RDS instance","        RESOURCE_ID = os.environ['RESOURCE_ID']","        ","        # Decrypt","        data_key_decoded = base64.b64decode(payload_overall_json['key'])","        data_key_decrypt_result = kms.decrypt(CiphertextBlob=data_key_decoded, EncryptionContext={'aws:rds:dbc-id': RESOURCE_ID})","            ","        # Decrypt the data","        # print(data_key_decrypt_result['Plaintext'])","        data_decrypted_decompressed =  decrypt_decompress(payload_decoded, data_key_decrypt_result['Plaintext'])","        ","        # Parse the JSON","        data_decrypted_decompressed_json =json.loads(data_decrypted_decompressed)","        ","        if data_decrypted_decompressed_json['databaseActivityEventList'][0]['type'] == \"heartbeat\" :","            # print(data_decrypted_decompressed_json)","            heartBeatEventRecords.add(record['recordId'], data_decrypted_decompressed_json,record['approximateArrivalTimestamp'])","        else:","            sQLEventRecords.add(record['recordId'], data_decrypted_decompressed_json, record['approximateArrivalTimestamp'])","            ","            ","    # output.append(heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS))","    # output.append(sQLEventRecords.process())","    ","    # output_hb = heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS)","    ","    output_hb = heartBeatEventRecords.process(FILTER_HEARTBEAT_EVENTS)","    output_sql = sQLEventRecords.process()","    ","","    ","    print('Total records processed {} records.'.format(len(output_hb)+len(output_sql)))","","    ","    return {'records': output_hb + output_sql }",""],"id":3}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":119,"column":0},"end":{"row":119,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":32,"state":"start","mode":"ace/mode/python"}},"timestamp":1618138184507}