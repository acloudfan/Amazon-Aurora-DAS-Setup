---
## Amazon Aurora PostgreSQL Database Activity Walktrough
## Creates Aurora PostgreSQL Cluster
##
## Changelog:
##
## Dependencies:
## none
##
## This sample code is made available under the MIT-0 license. See the LICENSE file.
# https://www.itonaut.com/2019/02/06/implement-kinesis-firehose-s3-delivery-preprocessed-by-lambda-in-aws-cloudformation/

AWSTemplateFormatVersion: 2010-09-09
Description: Amazon RDS PostgreSQL Database Activity Streams Lab
## Parameters
Parameters:
  TemplateName:
    Type: String
    Description: Name used for different elements created.
    Default: dasblog-firehose
  DASS3BucketTemplate:
    Type: String
    Description: This is the public S3 bucket with all artefacts
  DASS3BucketARN:
    Type: String
    Description: Name of the S3 Bucket to which firehose writes
  DASStreamARN:
    Type: String
    Description: ARN of the DAS Stream
  ClusterResourceID:
    Type: String
    Description: Cluser Resource ID
  LambdaRoleArn:
    Type: String
    Description: ARN of the Role for Lambda
  LambdaFunctionName:
    Type: String
    Description: Name of the Lambda function used for transformation
  doStreamTransform:
    Description: Carries out the transformation via Lambda if set to yes
    Default: "No"
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    
## Conditions
Conditions:
  WithLambda: !Equals [!Ref doStreamTransform, "Yes"]
  WithoutLambda: !Equals [!Ref doStreamTransform, "No"]

Resources:
 # Role for Firehose to write to S3
  policyFirehoseRole:
    Type: AWS::IAM::Policy
    DependsOn: dasStreamTransformerLambda
    Properties:
      PolicyName: !Sub ${TemplateName}-firehose-policy-${AWS::Region}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
            - kinesis:DescribeStream
            - kinesis:GetShardIterator
            - kinesis:GetRecords
            - kinesis:ListShards
            Effect: Allow
            Resource: !Ref DASStreamARN

      Roles: [!Ref roleFirehoseS3Delivery]
          

  InvokeLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_lambda_invoke_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: 
              - !GetAtt dasStreamTransformerLambda.Arn
      Roles:
        - !Ref roleFirehoseS3Delivery
        
  roleFirehoseS3Delivery:
    Type: AWS::IAM::Role
    # DependsOn: policyFirehoseRole
    Properties:
      RoleName: !Sub ${TemplateName}-firehose-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - firehose.amazonaws.com
          # - Sid: 'Invoke Lambda'
          #   Effect: Allow
          #   Action:
          #     - lambda:InvokeFunction
          #     - lambda:GetFunctionConfiguration
          #   Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess


# Role for Lambda function
  # roleLambdaFormatter:
  #   Type: AWS::IAM::Role
  #   Condition: WithLambda
  #   Properties:
  #     RoleName: !Sub ${TemplateName}-lambda-${AWS::Region}
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - sts:AssumeRole
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
  #       - arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser

# Create the Lambda Layer
  awssdkEncryptionLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    # Condition: WithLambda
    Properties: 
      CompatibleRuntimes: 
        - python3.7
      Description: 'AWS SDK Encryption Library'
      Content: 
        S3Bucket: !Ref DASS3BucketTemplate
        S3Key: lambda/layer/aws-sdk-encryption-lambda-layer-python37.zip
      LayerName: aws-sdk-encryption-python37
      
# Create the Lambda function
  dasStreamTransformerLambda:
    Type: AWS::Lambda::Function
    # Condition: WithLambda
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: lambda_function.lambda_handler
      # Role: !GetAtt 'roleLambdaFormatter.Arn'  
      Role: !Ref LambdaRoleArn
      Runtime: python3.7
      PackageType: Zip
      Layers:
        - !Ref awssdkEncryptionLambdaLayer
      Environment:
        Variables:
          FILTER_HEARTBEAT_EVENTS: false
          RESOURCE_ID: !Ref ClusterResourceID
      Code:
        S3Bucket: !Ref DASS3BucketTemplate
        S3Key: lambda/code/das-transformer-lambda-python37.zip
        # ZipFile: das-transformer-lambda-python37.zip
        
  # Firehose delivery stream Without TRANSFORM
  firehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: WithoutLambda
    DependsOn: policyFirehoseRole
    Properties:
      DeliveryStreamName: dasblog-walkthrough-firehose
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !Ref DASStreamARN
        RoleARN: !GetAtt roleFirehoseS3Delivery.Arn
      S3DestinationConfiguration:
        BucketARN: !Ref DASS3BucketARN
        # Prefix: success-
        # ErrorOutputPrefix: failure-
        CloudWatchLoggingOptions: 
          Enabled: true
          LogGroupName: dasblog-walkthrough
          LogStreamName: dasblog-walkthrough-firehose
        RoleARN: !GetAtt roleFirehoseS3Delivery.Arn
      
  # Firehose delivery stream With TRANSFORM
  firehoseDeliveryStreamWithTransform:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: WithLambda
    DependsOn: policyFirehoseRole
    Properties:
      DeliveryStreamName: dasblog-walkthrough-firehose-transform
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !Ref DASStreamARN
        RoleARN: !GetAtt roleFirehoseS3Delivery.Arn
      # S3DestinationConfiguration:
      #   BucketARN: !Ref DASS3BucketARN
      #   Prefix: success-
      #   ErrorOutputPrefix: failure-
      #   CloudWatchLoggingOptions: 
      #     Enabled: true
      #     LogGroupName: dasblog-walkthrough
      #     LogStreamName: dasblog-walkthrough-firehose
      #   RoleARN: !GetAtt roleFirehoseS3Delivery.Arn
      ExtendedS3DestinationConfiguration:
        BucketARN: !Ref DASS3BucketARN
        # Prefix: success-
        # ErrorOutputPrefix: failure-
        CloudWatchLoggingOptions: 
          Enabled: true
          LogGroupName: dasblog-walkthrough
          LogStreamName: dasblog-walkthrough-firehose
        RoleARN: !GetAtt roleFirehoseS3Delivery.Arn
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
              - ParameterName: LambdaArn
                ParameterValue: !GetAtt dasStreamTransformerLambda.Arn
              Type: Lambda


      

Outputs:
  DASFirehoseS3RoleArn:
    Description: 'Firehose Role Used for Delivery to S3' 
    Value: !GetAtt roleFirehoseS3Delivery.Arn
    
  DASFirehoseArn:
    Condition: WithoutLambda
    Description: 'Firehose Stream ARN'
    Value: !GetAtt firehoseDeliveryStream.Arn
    
  LambdaLayer:
    Condition: WithLambda
    Description: 'Lambda Layer ARN'
    Value: !Ref awssdkEncryptionLambdaLayer
    
  # LambdaRoleArn:
  #   Condition: WithLambda
  #   Description: 'This is the role used by Lambda function'
  #   Value: !GetAtt 'roleLambdaFormatter.Arn'  
    
