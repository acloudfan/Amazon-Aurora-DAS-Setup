---
## Amazon Aurora PostgreSQL Database Activity Walktrough
## Creates Aurora PostgreSQL Cluster
##
## Changelog:
##
## Dependencies:
## none
##
## This sample code is made available under the MIT-0 license. See the LICENSE file.

AWSTemplateFormatVersion: 2010-09-09
Description: Amazon RDS PostgreSQL Database Activity Streams Lab
## Parameters
Parameters:

  TemplateName:
    Type: String
    Description: Name used for different elements created.
  DBInstanceClass:
    Description: 'The instance type of database server.'
    Type: String
    Default: 'db.r5.large'
  MainVPC:
    Type: AWS::EC2::VPC::Id
    Description: Main VPC id
  PubSubnetCidr:
    Type: String
    Description: Cloud9 PublicSubnetID
  PrivateSubnets:
    Type: String
    Description: IDs of a Private subnets for RDS PG.

  DBMasterUsername:
    Description: 'The master user name for the DB instance (ignored when DBSnapshotIdentifier is set, value used from snapshot).'
    Type: String
    Default: masteruser
  DBEngineVersion:
    Description: Select Database Engine Version
    Type: String
    Default: 11.7
    AllowedValues:
      - 11.6
      - 11.7
      - 11.8


Mappings:
  ClusterSettings:
    global:
      dbSchema: daslab
      dbDriver: pgsql
      dbFamily: aurora-postgresql11

## Resources
Resources:
## Create enhanced monitoring role
  roleEnhancedMonitoring:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${TemplateName}-monitor-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
## Create a random generated password and store it as a secret
  secretDBMasterUser:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub "Master user credentials for ${TemplateName}-cluster"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "masteruser"}'
        GenerateStringKey: 'password'
        PasswordLength: 10
        #ExcludeCharacters: '"@/\$`&_,{}[]~+=|;:^*-()!#?'''
        ExcludePunctuation: true
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-DBMasterUser-secret
## Create DB security group
  dbSecGroupCluster:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MainVPC
      GroupName: !Sub ${TemplateName}-aupf-internal
      GroupDescription: Aurora Lab Database Firewall
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-aupf-internal
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref PubSubnetCidr
          Description: Allows AU PG access from Cloud9 
          
## Add self reference ingress rule
  dbSecGroupClusterIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt 'dbSecGroupCluster.GroupId'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref dbSecGroupCluster
      Description: 'Self Reference'

 ## Create DB subnet group
  dbSubnets:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${TemplateName}-db-subnet-group
      SubnetIds: !Split [',', !Ref PrivateSubnets] 
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-db-subnet-group

## Create Aurora cluster
  dbCluster:
    # Condition: WithInstance
    Type: AWS::RDS::DBCluster
    DependsOn: [roleEnhancedMonitoring]
    Properties:
      Engine: aurora-postgresql
      EngineVersion : !Ref DBEngineVersion
      Port: 5432
      DBSubnetGroupName: !Ref dbSubnets
      # DBClusterParameterGroupName: !Ref apgcustomclusterparamgroup #rs
      DBClusterIdentifier: !Sub ${TemplateName}-cluster
      BackupRetentionPeriod: 7
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref secretDBMasterUser, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref secretDBMasterUser, ':SecretString:password}}' ]]
      DatabaseName: !FindInMap [ ClusterSettings, global, dbSchema ]
      StorageEncrypted: true
      VpcSecurityGroupIds: [ !Ref dbSecGroupCluster ]
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-cluster

## Deploy the first cluster node (always the writer)
  dbNodeWriter:
    # Condition: WithInstance
    Type: AWS::RDS::DBInstance
    DependsOn: dbCluster
    Properties:
      DBClusterIdentifier: !Ref dbCluster
      DBInstanceIdentifier: !Sub ${TemplateName}-node-01
      CopyTagsToSnapshot: true
      DBInstanceClass: !Ref DBInstanceClass
      # DBParameterGroupName: !Ref apgcustomdbparamgroup #rs
      Engine: aurora-postgresql
      EngineVersion : !Ref DBEngineVersion
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn  
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-node-01

## Deploy a reader node
  dbNodeSecondary:
    # Condition: WithInstance
    Type: AWS::RDS::DBInstance
    DependsOn: [ dbNodeWriter ]
    Properties:
      DBClusterIdentifier: !Ref dbCluster
      DBInstanceIdentifier: !Sub ${TemplateName}-node-02
      CopyTagsToSnapshot: true
      DBInstanceClass: !Ref DBInstanceClass
      # DBParameterGroupName: !Ref apgcustomdbparamgroup #rs
      EngineVersion : !Ref DBEngineVersion
      Engine: aurora-postgresql
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn 
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-node-02
## Outputs
Outputs:
  dbSecGroupCluster:
    Description: Database Security Group
    Value: !Ref dbSecGroupCluster
  clusterEndpoint:
    Description: Aurora Cluster Endpoint
    # Value: !If [WithInstance, !GetAtt dbCluster.Endpoint.Address, '']
    Value: !GetAtt dbCluster.Endpoint.Address
  readerEndpoint:
    Description: Aurora Reader Endpoint
    # Value: !If [WithInstance, !GetAtt dbCluster.ReadEndpoint.Address, '']
    Value: !GetAtt dbCluster.ReadEndpoint.Address
  Port:
    Description: Aurora Endpoint Port
    # Value: !If [WithInstance, !GetAtt dbCluster.Endpoint.Port, '']
    Value: !GetAtt dbCluster.Endpoint.Port
  DatabaseName:
    Description: Database Name
    # Value: !If [WithInstance, !FindInMap [ ClusterSettings, global, dbSchema ], '']
    Value: !FindInMap [ ClusterSettings, global, dbSchema ]
  secretArn:
    Description: Database Credentials Secret ARN
    Value: !Ref secretDBMasterUser
  DBUsername:
    Description: Database master username
    Value: !Ref DBMasterUsername
  DBClusterId:
    Description: Cluster resource ARN
    Value: !Ref dbCluster
